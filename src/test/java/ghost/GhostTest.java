/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;
import processing.core.PApplet;
import processing.core.PImage;
import processing.core.PFont;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;

class GhostTest {
    @Test
    public void constructGhost() {
        Settings s = new Settings(null);
        Ghost classUnderTest = new Ghost(null, 10, 20, 1, GhostType.AMBUSHER, s);
        assertNotNull(classUnderTest);
    }
    @Test
    public void ghostTest() {
      Settings s = new Settings(null);
      s.configReader();
      s.mapReader();
      Ghost g = new Ghost(null, 32, 20, 1, GhostType.AMBUSHER, s);
      assertEquals(g.getX(), 32);
      assertEquals(g.getY(), 20);
      assertEquals(g.getSpeed(), 1);

      assertTrue(g.checkXMid());
      g.moveDown();
      assertEquals(g.getDirection(), "d");
      g.moveUp();
      assertEquals(g.getDirection(), "u");
      assertFalse(g.checkYMid());

      g.tick(0, 0, "u", false);
      assertEquals(g.getTargetX(), 448);
      assertEquals(g.getTargetY(), 0);
      g.restart();
      assertEquals(g.getX(), 32);
      assertEquals(g.getY(), 20);
      g.chase(0,0, "u");
      assertEquals(g.getTargetX(), 4);
      assertEquals(g.getTargetY(), 108);
      g.chase(0,0, "d");
      assertEquals(g.getTargetX(), 4);
      assertEquals(g.getTargetY(), -96);
      g.chase(0,0, "l");
      assertEquals(g.getTargetX(), -96);
      assertEquals(g.getTargetY(), 4);
      g.chase(0,0, "r");
      assertEquals(g.getTargetX(), 108);
      assertEquals(g.getTargetY(), 4);

      g.setTarget(9,9);
      assertEquals(g.getTargetX(), 9);
      assertEquals(g.getTargetY(), 9);

      Ghost c = new Ghost(null, 32, 20, 1, GhostType.CHASER, s);
      c.tick(0, 0, "u", false);
      assertEquals(c.getTargetX(), 448);
      assertEquals(c.getTargetY(), 0);
      c.chase(0,0, "u");
      assertEquals(c.getTargetX(), 8);
      assertEquals(c.getTargetY(), 8);


      Ghost i = new Ghost(null, 0, 0, 1, GhostType.IGNORANT, s);
      i.tick(0, 0, "u", false);
      assertEquals(i.getTargetX(), 0);
      assertEquals(i.getTargetY(), 0);
      i.chase(0,0,5,5,"u");
      assertEquals(i.getTargetX(), 0);
      assertEquals(i.getTargetY(), 600);

      Ghost w = new Ghost(null, 0, 0, 1, GhostType.WHIM, s);
      w.tick(0, 0, "u", false);
      assertEquals(w.getTargetX(), 0);
      assertEquals(w.getTargetY(), 600);
      w.chase(0,0,5,5,"u");


    }



}
